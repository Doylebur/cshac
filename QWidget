#include <QApplication>
#include <QWidget>
#include <QPushButton>
#include <QGridLayout>
#include <QLineEdit>

class Calcolatore : public QWidget {
public:
    Calcolatore(QWidget *parent = 0) : QWidget(parent) {
        // Creazione dei componenti dell'interfaccia
        display = new QLineEdit();
        display->setAlignment(Qt::AlignRight);
        display->setReadOnly(true);

        QGridLayout *layout = new QGridLayout();

        // Aggiunta dei pulsanti al layout
        layout->addWidget(display, 0, 0, 1, 4);
        layout->addWidget(createButton("7"), 1, 0);
        layout->addWidget(createButton("8"), 1, 1);
        layout->addWidget(createButton("9"), 1, 2);
        layout->addWidget(createButton("/"), 1, 3);
        layout->addWidget(createButton("4"), 2, 0);
        layout->addWidget(createButton("5"), 2, 1);
        layout->addWidget(createButton("6"), 2, 2);
        layout->addWidget(createButton("*"), 2, 3);
        layout->addWidget(createButton("1"), 3, 0);
        layout->addWidget(createButton("2"), 3, 1);
        layout->addWidget(createButton("3"), 3, 2);
        layout->addWidget(createButton("-"), 3, 3);
        layout->addWidget(createButton("0"), 4, 0);
        layout->addWidget(createButton("."), 4, 1);
        layout->addWidget(createButton("="), 4, 2);
        layout->addWidget(createButton("+"), 4, 3);

        setLayout(layout);

        // Connessione dei pulsanti al slot
        connectSignals();
    }

private slots:
    // Slot per gestire i clic dei pulsanti
    void onButtonClicked() {
        QPushButton *senderButton = qobject_cast<QPushButton*>(sender());
        if (senderButton) {
            QString buttonText = senderButton->text();

            if (buttonText == "=") {
                // Calcola il risultato quando viene premuto il pulsante "="
                QString expression = display->text();
                display->setText(QString::number(eval(expression)));
            } else {
                // Aggiunge il testo del pulsante all'espressione corrente
                display->setText(display->text() + buttonText);
            }
        }
    }

private:
    QLineEdit *display;

    // Metodo per creare un pulsante con testo e collegarlo al slot
    QPushButton* createButton(const QString& text) {
        QPushButton *button = new QPushButton(text);
        connect(button, &QPushButton::clicked, this, &Calcolatore::onButtonClicked);
        return button;
    }

    // Metodo per valutare un'espressione matematica
    double eval(const QString& expression) {
        return QLocale().toDouble(expression);
    }

    // Metodo per connettere i segnali dei pulsanti al slot
    void connectSignals() {
        const QObjectList& buttons = children();
        for (QObject* obj : buttons) {
            QPushButton* button = qobject_cast<QPushButton*>(obj);
            if (button) {
                connect(button, &QPushButton::clicked, this, &Calcolatore::onButtonClicked);
            }
        }
    }
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    Calcolatore calc;
    calc.setWindowTitle("Calcolatore");
    calc.show();

    return app.exec();
}
